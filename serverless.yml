service: bliblou-recipes-api

package:
  individually: true

plugins:
  - serverless-python-requirements

custom:
  pythonRequirements:
    dockerizePip: false
  product: bliblou
  stage: ${opt:stage, self:provider.stage}
  tableName: ${self:custom.stage}-recipes
  tableRegion: ${self:provider.region}
  # dev:
  #   deletion_policy: Delete
  # prod:
  #   deletion_policy: Retain

provider:
  name: aws
  runtime: python3.6
  stage: dev
  region: eu-west-1
  environment:
    tableName: ${self:custom.tableName}
    tableRegion: ${self:custom.tableRegion}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "Fn::GetAtt": [ RecipesTable, Arn ]

functions:
  create:
    handler: recipes-api/create.main
    events:
      - http:
          path: recipes
          method: post
          cors: true
          authorizer: aws_iam
  get:
    handler: recipes-api/get.main
    events:
      - http:
          path: recipes/{id}
          method: get 
          cors: true
          authorizer: aws_iam
  list:
    handler: recipes-api/list.main
    events:
      - http:
          path: recipes
          method: get
          cors: true
          authorizer: aws_iam
  update:
    handler: recipes-api/update.main
    events:
      - http:
          path: recipes/{id}
          method: put
          cors: true
          authorizer: aws_iam
  delete:
    handler: recipes-api/delete.main
    events:
      - http:
          path: recipes/{id}
          method: delete
          cors: true
          authorizer: aws_iam

resources:
  - ${file(resources/dynamodb-table.yml)}
  - ${file(resources/s3-bucket.yml)}
  - ${file(resources/api-gateway.yml)}